可以用在[]里面的寄存器有bx,si,di,bp
而bx跟bp，si跟di不能同时放在[]中，即[bx+bp]和[di+si]是错的
bx的段地址默认是ds，dp的段地址默认是ss，也就是默认栈段


div 除法
div ，当后面的是字节，也就是八位时，被除数默认是ax
当除数是十六位的时候，被除数默认是(dx)*10000H+(ax)
当除数是8位时，商存放在al，余数存放在ah中
当除数是16位时，商存放在ax，余数存放在dx中

用除法指令计算100001/100
mov dx,1
mov ax,86A1H
mov bx,100
div bx

程序执行后，(ax)=03E8H 即商1000,(dx)=1  余数1

用div计算data段中第一个数据除以第二个数据后的结果，商存放在第三个数据的存储单元

assume cs:main
data segment
	dd 100001
	dw 100
	dw 0
data ends
main segment
start:
	mov ax,data
	mov ds,ax

	mov dx,ds:[0]
	mov ax,ds:[2]
	mov bx,ds:[4]

	div bx
	mov ds:[6],ax

main ends
end start


dup:简化数据的定义，db，dd，dw
db 3 dup(0,1,2)
db 0,1,2,0,1,2,0,1,2

小实验
把data segment中的相应数据分别存放到table segment中并计算人均收入
首先存放年份的数据量有21*4个字节即0H-53H
然后存放薪水的数据量也有84个字节即54H-A7H
最后是总员工的数据量有42个字节即A8H-D1H

assume cs:main
data segment
    ;21年
    db '1975','1976','1977','1978','1979','1980', '1981'
    db '1982', '1983','1984', '1985','1986', '1987','1988'
    db '1989','1990','1991','1992','1993','1994','1995'
    
    ;21年来，每年的总薪水
    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479
    dd 140417,197514,345980,590827,803530,118300,1843000
    dd 2759000,3753000,4649000,5937000
    
    ;21年来，每年的总员工
    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037
    dw 5635,8226,11542,14430,15257,17800
data ends

table segment
    db 21 dup('year summ ne ??')
table ends

main segment
start:
	mov ax,data
	mov ds,ax	;读取数据
	mov ax,table
	mov es,ax	;写入数据

	mov bx,0	;循环table里的每一行
	mov cx,21	;循环次数
	mov si,0	;循环读取年份和薪水数据
	mov di,0	;循环读取员工数量

s:
	mov ax,ds:[si]	;年份
	mov es:[bx],ax
	mov dx,ds:[si+2]
	mov es:[bx+2],dx

	mov byte ptr es:[bx+4],' '

	mov ax,ds:[si+54H]	;薪水
	mov es:[bx+5],ax
	mov dx,ds:[si+56H]
	mov es:[bx+7],dx

	mov byte ptr es:[bx+9],' '

	mov ax,ds:[di + 0A8H]	;员工数量
	mov es:[bx+0AH],ax

	mov byte ptr es:[bx+0CH],' '
	
	mov ax,ds:[si+54H]	;刚开始的时候我把这里的ax,dx写反了,然后本来最后一个数是005A9768H/4588H变成了97685A00H/4588H，
	mov dx,ds:[si+56H]	;结果超过十六位，造成ax的溢出然后导致程序卡住了
	div word ptr ds:[di + 0A8H]		;计算平均薪水

	mov es:[bx+0DH],ax
	mov byte ptr es:[bx+0CH],' '

	add si,4
	add di,2
	add bx,16
	loop s

	mov ax,4c00h
        int 21h

main ends
end start